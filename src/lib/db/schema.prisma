generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum TypeTabungan {
  bulan
  minggu
}

enum JenisKelamin {
  L
  P
}

enum StatusPendaftaran {
  aktif
  batal
  selesai
}

enum StatusAnggota {
  aktif
  batal
}

enum StatusTransaksi {
  pending
  verifikasi
  ditolak
  settlement
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pendaftaran PendaftaranUmroh[]
  tabungan    Tabungan[]
  jemaah      Jemaah[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model PendaftaranUmroh {
  id                  String            @id @default(cuid())
  user_id             String
  paket_id            String
  tanggal_pendaftaran DateTime          @default(now())
  status              StatusPendaftaran @default(aktif)

  user    User                 @relation(fields: [user_id], references: [id])
  paket   Paket                @relation(fields: [paket_id], references: [id])
  anggota PendaftaranAnggota[]
}

model PendaftaranAnggota {
  id             String        @id @default(cuid())
  pendaftaran_id String
  jemaah_id      String
  tipe_kamar     String
  status         StatusAnggota @default(aktif)

  pendaftaran PendaftaranUmroh @relation(fields: [pendaftaran_id], references: [id])
  jemaah      Jemaah           @relation(fields: [jemaah_id], references: [id])
}

model Jemaah {
  id            String       @id @default(cuid())
  user_id       String? // opsional, hanya jika dia login
  nama          String
  tanggal_lahir DateTime
  jenis_kelamin JenisKelamin
  no_hp         String

  user    User?                @relation(fields: [user_id], references: [id])
  anggota PendaftaranAnggota[]
}

model Paket {
  id                    String   @id @default(cuid())
  nama                  String
  image_url             String
  maskapai_id           String
  hotel_madinah_id      String
  hotel_mekkah_id       String
  durasi                String
  deskripsi             String
  tanggal_keberangkatan DateTime

  hotel_madinah Hotel    @relation("HotelMadinah", fields: [hotel_madinah_id], references: [id])
  hotel_mekkah  Hotel    @relation("HotelMekkah", fields: [hotel_mekkah_id], references: [id])
  maskapai      Maskapai @relation(fields: [maskapai_id], references: [id])

  pendaftaran PendaftaranUmroh[]
  paket_kamar PaketKamar[]
  tabungan    Tabungan[]
}

model PaketKamar {
  id         String @id @default(cuid())
  paket_id   String
  tipe_kamar String // 'quad', 'triple', 'double'
  total_pax  Int
  harga      Int

  paket Paket @relation(fields: [paket_id], references: [id], onDelete: Cascade)
}

model Hotel {
  id        String @id @default(cuid())
  nama      String
  bintang   String
  location  String
  image_url String

  madinahPackages Paket[] @relation("HotelMadinah")
  mekkahPackages  Paket[] @relation("HotelMekkah")
}

model Maskapai {
  id        String  @id @default(cuid())
  nama      String
  deskripsi String?

  paket Paket[]
}

model Tabungan {
  id            String       @id @default(cuid())
  user_id       String
  paket_id      String
  status        String       @default("aktif")
  tanggal_mulai DateTime
  tanggal_akhir DateTime
  tipe_cicilan  TypeTabungan

  user      User                @relation(fields: [user_id], references: [id])
  paket     Paket               @relation(fields: [paket_id], references: [id])
  transaksi TransaksiTabungan[]
}

model TransaksiTabungan {
  id                String          @id @default(cuid())
  tabungan_id       String
  tanggal_setor     DateTime        @default(now())
  jumlah            Int
  status_pembayaran StatusTransaksi @default(pending)
  bukti_transfer    String? // untuk pembayaran manual (opsional)
  midtrans_order_id String? // dari Snap token
  midtrans_status   String? // e.g. "settlement", "expire", dll

  tabungan Tabungan @relation(fields: [tabungan_id], references: [id])
}
